diff a/teller-protocol-v2-audit-2024/packages/contracts/contracts/TellerV2.sol b/teller-protocol-v2-audit-2024/packages/contracts/contracts/TellerV2.sol	(rejected hunks)
@@ -18,6 +18,7 @@ import { Collateral } from "./interfaces/escrow/ICollateralEscrowV1.sol";
 import "./interfaces/IEscrowVault.sol";
 
 import { ILoanRepaymentCallbacks } from "./interfaces/ILoanRepaymentCallbacks.sol";
+import "./interfaces/ILoanRepaymentListener.sol";
 
 // Libraries
 import "@openzeppelin/contracts/utils/Address.sol";
@@ -883,7 +871,7 @@ contract TellerV2 is
             emit LoanRepayment(_bidId);
         }
 
-        _sendOrEscrowFunds(_bidId, paymentAmount); //send or escrow the funds
+        _sendOrEscrowFunds(_bidId, _payment); //send or escrow the funds
 
         // update our mappings
         bid.loanDetails.totalRepaid.principal += _payment.principal;
@@ -896,16 +884,17 @@ contract TellerV2 is
         }
     }
 
-    function _sendOrEscrowFunds(uint256 _bidId, uint256 _paymentAmount)
+
+    function _sendOrEscrowFunds(uint256 _bidId, Payment memory _payment)
         internal
     {
         Bid storage bid = bids[_bidId];
         address lender = getLoanLender(_bidId);
 
-        try
-            //first try to pay directly
-            //have to use transfer from  (not safe transfer from) for try/catch statement
-            //dont try to use any more than 100k gas for this xfer
+        uint256 _paymentAmount = _payment.principal + _payment.interest;
+
+        try 
+
             bid.loanDetails.lendingToken.transferFrom{ gas: 100000 }(
                 _msgSenderForMarket(bid.marketplaceId),
                 lender,
@@ -943,8 +932,27 @@ contract TellerV2 is
                 paymentAmountReceived
             );
         }
+
+        address loanRepaymentListener = repaymentListenerForBid[_bidId];
+
+        if (loanRepaymentListener != address(0)) {
+            require(gasleft() >= 40000, "Insufficient gas");  //fixes the 63/64 remaining issue
+            try
+                ILoanRepaymentListener(loanRepaymentListener).repayLoanCallback{
+                    gas: 40000
+                }( //limit gas costs to prevent lender griefing repayments
+                    _bidId,
+                    _msgSenderForMarket(bid.marketplaceId),
+                    _payment.principal,
+                    _payment.interest
+                )
+            {} catch {}
+        }
     }
 
+
+
+
     /**
      * @notice Calculates the total amount owed for a loan bid at a specific timestamp.
      * @param _bidId The id of the loan bid to calculate the owed amount for.
